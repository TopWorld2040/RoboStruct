<?xml version="1.0" encoding="utf-8"?>
<glslprog glslversion="330" name="camera">
    <attribute name="position" type="vec3"/>
    <attribute name="normal" type="vec3"/>
    <attribute name="tangent" type="vec4"/>
    <attribute name="uv" type="vec2"/>
    <block name="camera_matrices" binding="0"/>
    <uniform name="model_matrix" type="mat4"/>
    <texture name="diffuse_map" type="2d" texunit="0"/>
    <texture name="normal_map" type="2d" texunit="1"/>
    <texture name="specular_map" type="2d" texunit="2"/>
    <texture name="cube_map" type="cube" texunit="3"/>
    <vertexshader source="
        #version 330

        layout(location = 0) in vec3 position;
        layout(location = 1) in vec3 normal;
        layout(location = 2) in vec4 tangent;
        layout(location = 3) in vec2 uv;

        layout(std140) uniform camera_matrices
        {
            mat4 perspective_matrix;
            mat4 view_matrix;
            mat4 projection_matrix;
        };

        uniform mat4 model_matrix;

        out vec3 light_direction;
        out vec3 view_direction;
        out vec2 uv_coordinate;
        out mat3 tbn_matrix;

        void main()
        {
            gl_Position = projection_matrix * model_matrix * vec4(position, 1.0);
            vec4 eye_position = view_matrix * model_matrix * vec4(position, 1.0);

            mat3 normal_matrix = mat3(view_matrix * model_matrix);

            vec3 n = normalize(normal_matrix * normal);
            vec3 t = normalize(normal_matrix * tangent.xyz);
            vec3 b = cross(n, t) * tangent.w;

            tbn_matrix = mat3(t.x, b.x, n.x,
                              t.y, b.y, n.y,
                              t.z, b.z, n.z);

            view_direction  = tbn_matrix * -(eye_position.xyz / eye_position.w);
            light_direction = tbn_matrix * vec3(0.0, 0.0, 1.0);

            uv_coordinate = uv;
        }
        "/>
    <fragmentshader source="
        #version 330

        uniform sampler2D   diffuse_map;
        uniform sampler2D   normal_map;
        uniform sampler2D   specular_map;
        uniform samplerCube cube_map;

        in vec3 light_direction;
        in vec3 view_direction;
        in vec2 uv_coordinate;
        in mat3 tbn_matrix;

        out vec4 fragment_color;

        void main()
        {
            mat3 inv_tbn                = transpose(tbn_matrix);

            vec3 light_vec              = normalize(light_direction);
            vec3 view_vec               = normalize(view_direction);
            vec3 half_vec               = normalize(light_direction + view_direction);
            vec3 normal_vec             = vec3(texture(normal_map, uv_coordinate.st).ar * 2.0 - 1.0, 0.0);
            normal_vec.z                = sqrt(1.0 - dot(normal_vec.xy, normal_vec.xy));
            normalize(normal_vec);

            vec4 emissive_color         = vec4(0.0, 0.0, 0.0, 1.0);
            vec4 ambient_color          = vec4(0.3, 0.3, 0.3, 1.0);
            vec4 diffuse_color          = vec4(texture(diffuse_map, uv_coordinate.st).rgb, 1.0);
            vec4 specular_color         = vec4(texture(specular_map, uv_coordinate.st).rgb, 1.0);
            vec4 reflected_color        = vec4(texture(cube_map, -reflect(inv_tbn * view_vec, inv_tbn * normal_vec)).rgb, 1.0);

            float emission              = 0.0;
            float ambient_contribution  = 0.0;
            float lambert_term          = max(0.0, dot(normal_vec, light_vec));
            float shininess             = 10.0;
            float blinn_term            = pow(max(dot(half_vec, normal_vec), 0.0), shininess);
            float reflectivity          = texture(specular_map, uv_coordinate.st).a;

            fragment_color  = emissive_color    * emission
                            + ambient_color     * ambient_contribution
                            + diffuse_color     * lambert_term
                            + specular_color    * blinn_term
                            + reflected_color   * reflectivity;
            fragment_color.a = 1.0;
        }
        "/>
</glslprog>
